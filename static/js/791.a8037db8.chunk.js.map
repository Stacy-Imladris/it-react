{"version":3,"file":"static/js/791.a8037db8.chunk.js","mappings":"oKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,EAAyB,2B,mBCQZA,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,IAAZ,OACtB,iBAAKC,UAAWC,EAAhB,WACI,0BAAK,gBAAKC,IAAKH,EAAKI,IAAK,kBACzB,0BAAK,SAAC,KAAD,CAASC,GAAI,YAAcN,EAA3B,SAAgCD,UCX7C,EAA0B,yBCMbQ,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,EAAWR,GAAX,OAAqC,gBAAKE,UAAWC,EAAhB,SACvDK,K,uCCHCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgBxBC,GAAsBC,EAAAA,EAAAA,GAAkC,CACjEC,KAAM,wBADyBD,EAVmC,SAAC,GAAD,IAAEE,EAAF,EAAEA,aAAF,OAClE,kBAAMC,SAAUD,EAAhB,WACI,0BACI,SAACE,EAAA,EAAD,CAAOC,YAAa,qBAAsBlB,KAAM,iBACzCmB,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,EAAUZ,QAErD,0BAAK,qD,oBCIb,GAAea,E,QAAAA,KACXC,EAAAA,EAAAA,KALoB,SAACC,GAAD,MAA6C,CACjEC,YAAaD,EAAMC,eAKE,CAACC,WAAYC,EAAAA,EAAAA,aAClCC,EAAAA,EAHJ,ECduB,SAAC,GAAiD,IAAhDH,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,WAC5BG,EAAkBJ,EAAYK,QAC/BC,KAAI,gBAAE/B,EAAF,EAAEA,GAAID,EAAN,EAAMA,KAAME,EAAZ,EAAYA,IAAZ,OAAiC,SAACH,EAAD,CAAqBE,GAAIA,EAAID,KAAMA,EACvBE,IAAKA,GADAD,MAGrDgC,EAAmBP,EAAYQ,SAChCF,KAAI,gBAAE/B,EAAF,EAAEA,GAAIQ,EAAN,EAAMA,QAAN,OAAgC,SAACD,EAAD,CAAkBP,GAAIA,EAAIQ,QAASA,GAArBR,MAMvD,OACI,iBAAKE,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAiC0B,KACjC,gBAAK3B,UAAWC,EAAhB,SAA6B6B,KAC7B,SAACrB,EAAD,CAAqBI,SARP,SAACmB,GACnBR,EAAWQ,EAASC,0B,iICPtBC,EAAkB,SAACZ,GAAD,MAA6C,CACjEa,OAAQb,EAAMc,KAAKD,SAGhB,SAAST,EAAoBW,GAMhC,OAAOhB,EAAAA,EAAAA,IAAQa,EAARb,EALmB,SAACiB,GACvB,IAAKH,EAAwBG,EAAxBH,OAAWI,GAAhB,OAA6BD,EAA7B,GACA,OAAKH,GACE,SAACE,GAAD,UAAeE,KADF,SAAC,KAAD,CAAUnC,GAAIoC,EAAAA,EAAAA","sources":["webpack://it-react/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://it-react/./src/components/Dialogs/DialogItem/DialogItem.module.scss?c926","components/Dialogs/DialogItem/DialogItem.tsx","webpack://it-react/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__b8Sy6\",\"dialogsItems\":\"Dialogs_dialogsItems__wY7q4\",\"messages\":\"Dialogs_messages__62fhe\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__Q2iWP\"};","import s from './DialogItem.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n    img: string\r\n}\r\n\r\nexport const DialogItem = ({name, id, img}: DialogItemPropsType) => (\r\n    <div className={s.dialog}>\r\n        <div><img src={img} alt={'user image'}/></div>\r\n        <div><NavLink to={'/dialogs/' + id}>{name}</NavLink></div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__iLSxt\"};","import s from './Message.module.scss';\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport const Message = ({message, id}: MessagePropsType) => <div className={s.message}>\r\n    {message}\r\n</div>","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {FC} from 'react';\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport type AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<AddMessageFormDataType>> = ({handleSubmit}) => (\r\n    <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Enter your message'} name={'newMessageBody'}\r\n                   component={Textarea} validate={[required, maxLength50]}/>\r\n        </div>\r\n        <div><button>Send message</button></div>\r\n    </form>\r\n)\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)","import {dialogsActions, DialogsInitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    dialogsPage: state.dialogsPage,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n        mapStateToProps, {addMessage: dialogsActions.addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)","import s from './Dialogs.module.scss';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogType, MessageType} from '../../redux/dialogs-reducer';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {AddMessageFormDataType, AddMessageFormRedux} from './AddMessageForm/AddMessageForm';\r\n\r\nexport const Dialogs = ({dialogsPage, addMessage}: DialogsPropsType) => {\r\n    const dialogsElements = dialogsPage.dialogs\r\n        .map(({id, name, img}: DialogType) => <DialogItem key={id} id={id} name={name}\r\n                                                          img={img}/>)\r\n\r\n    const messagesElements = dialogsPage.messages\r\n        .map(({id, message}: MessageType) => <Message key={id} id={id} message={message}/>)\r\n\r\n    const addNewMessage = (formData: AddMessageFormDataType) => {\r\n        addMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>{dialogsElements}</div>\r\n            <div className={s.messages}>{messagesElements}</div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}","import {Redirect} from 'react-router-dom';\r\nimport {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {PATH} from '../enums/paths';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["DialogItem","name","id","img","className","s","src","alt","to","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","required","compose","connect","state","dialogsPage","addMessage","dialogsActions","withAuthRedirect","dialogsElements","dialogs","map","messagesElements","messages","formData","newMessageBody","mapStateToProps","isAuth","auth","Component","props","restProps","PATH"],"sourceRoot":""}