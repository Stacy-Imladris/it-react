{"version":3,"file":"static/js/998.873bb196.chunk.js","mappings":"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","sources":["webpack://it-react/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileData/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://it-react/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://it-react/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__aRRiq\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileData_descriptionBlock__WCLO+\"};","import s from './ProfileData.module.css';\r\nimport {ProfileType} from '../../../../api/api';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\nexport const ProfileData = ({profile, setEditMode}: ProfileDataPropsType) => {\r\n    const {contacts, fullName, aboutMe, lookingForAJob, lookingForAJobDescription} = profile\r\n    const contactsValues = Object.values(contacts || {})\r\n\r\n    const showEditProfileForm = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <button onClick={showEditProfileForm}>Edit profile</button>\r\n            <div>{fullName}</div>\r\n            <div>{aboutMe}</div>\r\n            <div>{lookingForAJob ? 'I\\'m looking for a job right now' : 'I don\\'t need a job'}</div>\r\n            <div>{lookingForAJobDescription}</div>\r\n            <span>Where you can find me: </span>\r\n            {contactsValues.map((m) => m && <div key={m}>{m}</div>)}\r\n        </div>\r\n    )\r\n}","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport React from 'react';\r\nimport s from '../../../common/FormsControls/FormsControls.module.css';\r\nimport {ContactType} from '../../../../api/api';\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: ContactType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormPropsType>> = ({handleSubmit, error, initialValues}) => {\r\n    const contactsEntries = Object.entries(initialValues.contacts || {})\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save changes</button></div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>:\r\n                <div>\r\n                    <Field placeholder={'Full name'} name={'fullName'}\r\n                           component={Input} validate={[]}/>\r\n                </div>\r\n                <b>About me</b>:\r\n                <div>\r\n                    <Field placeholder={'About me'} name={'aboutMe'}\r\n                           component={Textarea} validate={[]}/>\r\n                </div>\r\n                <b>Looking for a job</b>:\r\n                <div>\r\n                    <Field name={'lookingForAJob'}\r\n                           component={Input} validate={[]} type={'checkbox'}/>\r\n                </div>\r\n                <b>My professional skills</b>:\r\n                <div>\r\n                    <Field placeholder={'My professional skills'} name={'lookingForAJobDescription'}\r\n                           component={Textarea} validate={[]}/>\r\n                </div>\r\n                <b>Where you can find me</b>:\r\n                {contactsEntries.map(m => <div key={m[0] + m[1]}>\r\n                    <div>{m[0]}: </div>\r\n                    <div>\r\n                        <Field name={`contacts.${m[0]}}`}\r\n                               component={Input} validate={[]}/>\r\n                    </div>\r\n                </div>)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {AppThunk} from '../../../../../redux/redux-store';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        updateStatus(profileStatus)\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n    /*state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div><span onDoubleClick={activateEditMode}>{status || 'no status'}</span></div>}\r\n            {editMode &&\r\n            <div><input onChange={onStatusChange} value={profileStatus} onBlur={deactivateEditMode} autoFocus/></div>}\r\n        </div>\r\n    )\r\n}","import {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {AppThunk} from '../../../redux/redux-store';\r\nimport {ProfileType} from '../../../api/api';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {\r\n    ProfileDataFormPropsType,\r\n    ProfileDataReduxForm\r\n} from './ProfileDataForm/ProfileDataForm';\r\nimport {ProfileStatusWithHooks} from './ProfileData/ProfileStatus/ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n    isOwner: boolean\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    isEditMode: boolean\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, savePhoto, saveProfile,\r\n                                isOwner, isEditMode, setEditMode,\r\n                            }: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormPropsType) => {\r\n        saveProfile(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img src={profile.photos.large || userPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            {\r\n                isEditMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} setEditMode={setEditMode}/>\r\n            }\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__1A7Uz\",\"posts\":\"MyPosts_posts__WlC3n\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__z6vKl\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = ({message, likeCount}: PostPropsType) => {\r\n    return <div className={s.item}>\r\n        <img src='https://99px.ru/sstorage/1/2012/06/image_10406120020582211120.gif'/>\r\n        {message}\r\n        <div>\r\n            <span>like</span> {likeCount}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst addPostForm: React.FC<InjectedFormProps<AddPostFormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Enter your post'} name={'newPostBody'}\r\n                       component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'profileAddPostForm'})(addPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {AddPostFormDataType, AddPostFormRedux} from './AddPostForm/AddPostForm';\r\n\r\nexport const MyPosts = React.memo(({posts, addPost}: MyPostsPropsType) => {\r\n    const postsElements = [...posts].reverse().map(p => <Post key={p.id} message={p.message}\r\n                                                     likeCount={p.likesCount}/>);\r\n\r\n    const addNewPost = (formData: AddPostFormDataType) => {\r\n        addPost(formData.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {MyPosts} from \"./MyPosts\";\r\nimport {profileActions, PostType} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>,\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: profileActions.addPost})(MyPosts);","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {AppThunk} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../api/api';\r\nimport {ProfileDataFormPropsType} from './ProfileInfo/ProfileDataForm/ProfileDataForm';\r\n\r\ntype ProfilePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n    isOwner: boolean\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    isEditMode: boolean\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nconst Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile, isEditMode, setEditMode}: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}\r\n                         isOwner={isOwner} savePhoto={savePhoto} saveProfile={saveProfile}\r\n                         isEditMode={isEditMode} setEditMode={setEditMode}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {AppStateType, AppThunk} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile, profileActions,\r\n    savePhoto, saveProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {ProfileType} from '../../api/api';\r\nimport {ProfileDataFormPropsType} from './ProfileInfo/ProfileDataForm/ProfileDataForm';\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile() {\r\n        const {match, authorizedUserId, history, getUserProfile, getStatus} = this.props\r\n        let userId = +match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={+this.props.match.params.userId === this.props.authorizedUserId\r\n                     || !this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     isEditMode={this.props.isEditMode}\r\n                     setEditMode={this.props.setEditMode}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    isEditMode: boolean\r\n}\r\nexport type MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => AppThunk\r\n    getStatus: (userId: number) => AppThunk\r\n    updateStatus: (status: string) => AppThunk\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isEditMode: state.profilePage.isEditMode,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus, savePhoto, saveProfile,\r\n        setEditMode: profileActions.setEditMode}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)"],"names":["ProfileData","profile","setEditMode","contacts","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactsValues","Object","values","className","s","onClick","map","m","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","initialValues","contactsEntries","entries","onSubmit","Field","placeholder","name","component","Input","validate","Textarea","type","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","status","updateStatus","useState","editMode","profileStatus","setProfileStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","autoFocus","ProfileInfo","savePhoto","saveProfile","isOwner","isEditMode","Preloader","src","photos","large","userPhoto","target","files","formData","message","likeCount","maxLength10","maxLengthCreator","AddPostFormRedux","required","MyPosts","React","posts","addPost","postsElements","reverse","p","likesCount","id","newPostBody","MyPostsContainer","connect","state","profilePage","profileActions","ProfileContainer","this","props","match","authorizedUserId","history","getUserProfile","getStatus","userId","params","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}