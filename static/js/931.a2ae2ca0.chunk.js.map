{"version":3,"file":"static/js/931.a2ae2ca0.chunk.js","mappings":"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","sources":["webpack://it-react/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../javascript/esm|D:/it/it-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://it-react/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://it-react/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"ProfileInfo_banner__nn5fV\",\"avatar\":\"ProfileInfo_avatar__aRRiq\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__GGMDZ\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {AppThunk} from '../../../redux/redux-store';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        updateStatus(profileStatus)\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n    /*state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div><span onDoubleClick={activateEditMode}>{status || 'no status'}</span></div>}\r\n            {editMode &&\r\n            <div><input onChange={onStatusChange} value={profileStatus} onBlur={deactivateEditMode} autoFocus/></div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {AppThunk} from '../../../redux/redux-store';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport {ProfileType} from '../../../api/api';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const contactsValues = Object.values(profile.contacts)\r\n\r\n    return (\r\n        <div>\r\n            {/*<div className={s.banner}>\r\n                <img src='https://artline.ua/storage/images/news/120/ru/news_1600262974910581_0.jpg'/>\r\n            </div>*/}\r\n            <div className={s.avatar}>\r\n                <img src={profile?.photos.large ? profile?.photos.large : ''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <div>{profile.fullName}</div>\r\n                <div>{profile.aboutMe}</div>\r\n                <div>{profile.lookingForAJob ? 'I\\'m looking for a job right now' : 'I don\\'t need a job'}</div>\r\n                <div>{profile.lookingForAJobDescription}</div>\r\n                <span>Where you can find me: </span>\r\n                {contactsValues.map((m, i) => m && <div key={m + i}>{m}</div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__1A7Uz\",\"posts\":\"MyPosts_posts__WlC3n\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__z6vKl\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = ({message, likeCount}: PostPropsType) => {\r\n    return <div className={s.item}>\r\n        <img src='https://99px.ru/sstorage/1/2012/06/image_10406120020582211120.gif'/>\r\n        {message}\r\n        <div>\r\n            <span>like</span> {likeCount}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst addPostForm: React.FC<InjectedFormProps<AddPostFormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Enter your post'} name={'newPostBody'}\r\n                       component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'profileAddPostForm'})(addPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {AddPostFormDataType, AddPostFormRedux} from './AddPostForm/AddPostForm';\r\n\r\nexport const MyPosts = React.memo(({posts, addPost}: MyPostsPropsType) => {\r\n    const postsElements = [...posts].reverse().map(p => <Post key={p.id} message={p.message}\r\n                                                     likeCount={p.likesCount}/>);\r\n\r\n    const addNewPost = (formData: AddPostFormDataType) => {\r\n        addPost(formData.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {MyPosts} from \"./MyPosts\";\r\nimport {profileActions, PostType} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>,\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: profileActions.addPost})(MyPosts);","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {AppThunk} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../api/api';\r\n\r\ntype ProfilePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nconst Profile = ({profile, status, updateStatus}: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {AppStateType, AppThunk} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {ProfileType} from '../../api/api';\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {match, authorizedUserId, history, getUserProfile, getStatus} = this.props\r\n        let userId = +match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => AppThunk\r\n    getStatus: (userId: number) => AppThunk\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)"],"names":["_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","profileStatus","setProfileStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","autoFocus","ProfileInfo","profile","Preloader","contactsValues","Object","values","contacts","className","s","src","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","map","m","message","likeCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","React","posts","addPost","postsElements","reverse","p","likesCount","id","formData","newPostBody","MyPostsContainer","connect","state","profilePage","profileActions","ProfileContainer","this","props","match","authorizedUserId","history","getUserProfile","getStatus","userId","params","compose","auth","isAuth","withRouter"],"sourceRoot":""}