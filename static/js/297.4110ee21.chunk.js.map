{"version":3,"file":"static/js/297.4110ee21.chunk.js","mappings":"oKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yBAAhL,EAAkN,wB,mBCSrMA,EAAa,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,IAClC,OACI,iBAAKC,UAAWC,EAAW,IAAMA,EAAjC,WACI,0BACI,gBAAKC,IAAKH,OAEd,0BACI,SAAC,KAAD,CAASI,GAAI,YAAcL,EAA3B,SAAgCD,UCTnCO,EAAU,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAAmC,EAA1BP,GAC9B,OACI,gBAAKE,UAAWC,EAAhB,SACKI,K,uCCNPC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBxBC,GAAsBC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,wBAAzCD,EAdyC,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAC1E,OACI,kBAAMC,SAAUD,EAAhB,WACI,0BACI,SAACE,EAAA,EAAD,CAAOC,YAAa,qBAAsBjB,KAAM,iBACzCkB,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,EAAUZ,QAErD,0BACI,qD,qDCXVa,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,ICa3B,GAAeE,E,MAAAA,KACXC,EAAAA,EAAAA,KAPoB,SAACJ,GACrB,MAAO,CACHK,YAAaL,EAAMK,eAK6D,CAACC,WAAYC,EAAAA,EAAAA,cDV9F,SAA6BC,GAMhC,OAAOJ,EAAAA,EAAAA,IAAQL,EAARK,EALmB,SAACK,GACvB,IAAKR,EAAwBQ,EAAxBR,OAAWS,GAAhB,OAA6BD,EAA7B,GACA,OAAKR,GACE,SAACO,GAAD,UAAeE,KADF,SAAC,KAAD,CAAU3B,GAAI,gBCM1C,ECfuB,SAAC,GAAiD,IAAhDsB,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,WAC5BK,EAAkBN,EAAYO,QAAQC,KAAI,SAACC,GAAD,OAAmB,SAACtC,EAAD,CAAuBC,KAAMqC,EAAErC,KACbC,GAAIoC,EAAEpC,GAAIC,IAAKmC,EAAEnC,KADlBmC,EAAEpC,OAEhFqC,EAAmBV,EAAYW,SAASH,KAAI,SAACI,GAAD,OAAoB,SAACjC,EAAD,CAAoBC,QAASgC,EAAEhC,QAChBP,GAAIuC,EAAEvC,IADPuC,EAAEvC,OAOtF,OACI,iBAAKE,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,gBAAK/B,UAAWC,EAAhB,SACKkC,KAEL,SAAC3B,EAAD,CAAqBI,SAZP,SAAC0B,GACnBZ,EAAWY,EAASC","sources":["webpack://it-react/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qJHTj\",\"dialogsItems\":\"Dialogs_dialogsItems__1Kh3d\",\"active\":\"Dialogs_active__rxPeG\",\"messages\":\"Dialogs_messages__5CWGT\",\"message\":\"Dialogs_message__0Tpze\",\"dialog\":\"Dialogs_dialog__ugUoX\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n    img: string\r\n}\r\n\r\nexport const DialogItem = ({name, id, img}: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <div>\r\n                <img src={img}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={'/dialogs/' + id}>{name}</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport const Message = ({message, id}: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport type AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Enter your message'} name={'newMessageBody'}\r\n                       component={Textarea} validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {Redirect} from 'react-router-dom';\r\nimport {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {dialogsActions, DialogsInitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport React from 'react';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addMessage: dialogsActions.addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogType, MessageType} from '../../redux/dialogs-reducer';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {AddMessageFormDataType, AddMessageFormRedux} from './AddMessageForm/AddMessageForm';\r\n\r\nexport const Dialogs = ({dialogsPage, addMessage}: DialogsPropsType) => {\r\n    const dialogsElements = dialogsPage.dialogs.map((d: DialogType) => <DialogItem key={d.id} name={d.name}\r\n                                                                                         id={d.id} img={d.img}/>);\r\n    const messagesElements = dialogsPage.messages.map((m: MessageType) => <Message key={m.id} message={m.message}\r\n                                                                                         id={m.id}/>);\r\n\r\n    const addNewMessage = (formData: AddMessageFormDataType) => {\r\n        addMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}"],"names":["DialogItem","name","id","img","className","s","src","to","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","required","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","addMessage","dialogsActions","Component","props","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","newMessageBody"],"sourceRoot":""}