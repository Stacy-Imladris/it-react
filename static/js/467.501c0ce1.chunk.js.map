{"version":3,"file":"static/js/467.501c0ce1.chunk.js","mappings":"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","sources":["webpack://it-react/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://it-react/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://it-react/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__HIVpd\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileData_descriptionBlock__tmx8N\"};","import s from './ProfileData.module.scss';\r\nimport {ProfileType} from '../../../../api/profile-api';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nexport const ProfileData = ({profile, setEditMode}: ProfileDataPropsType) => {\r\n    const {contacts, fullName, aboutMe, lookingForAJob, lookingForAJobDescription} = profile\r\n    const contactsValues = Object.values(contacts || {})\r\n\r\n    const showEditProfileForm = () => setEditMode(true)\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <button onClick={showEditProfileForm}>Edit profile</button>\r\n            <div>{fullName}</div>\r\n            <div>{aboutMe}</div>\r\n            <div>{lookingForAJob ? 'I\\'m looking for a job right now' : 'I don\\'t need a job'}</div>\r\n            <div>{lookingForAJobDescription}</div>\r\n            <span>Where you can find me: </span>\r\n            {contactsValues.map(m => m && <div key={m}>{m}</div>)}\r\n        </div>\r\n    )\r\n}","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport s from '../../../common/FormsControls/FormsControls.module.scss';\r\nimport {FC} from 'react';\r\nimport {ContactType} from '../../../../api/profile-api';\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    contacts: ContactType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileDataFormPropsType>> = ({\r\n                                                                              handleSubmit,\r\n                                                                              error,\r\n                                                                              initialValues\r\n                                                                          }) => {\r\n    const contactsEntries = Object.entries(initialValues.contacts || {})\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save changes</button>\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <b>Full name</b>:\r\n                <div>\r\n                    <Field placeholder={'Full name'} name={'fullName'}\r\n                           component={Input} validate={[]}/>\r\n                </div>\r\n                <b>About me</b>:\r\n                <div>\r\n                    <Field placeholder={'About me'} name={'aboutMe'}\r\n                           component={Textarea} validate={[]}/>\r\n                </div>\r\n                <b>Looking for a job</b>:\r\n                <div>\r\n                    <Field name={'lookingForAJob'} component={Input}\r\n                           validate={[]} type={'checkbox'}/>\r\n                </div>\r\n                <b>My professional skills</b>:\r\n                <div>\r\n                    <Field placeholder={'My professional skills'}\r\n                           name={'lookingForAJobDescription'}\r\n                           component={Textarea} validate={[]}/>\r\n                </div>\r\n                <b>Where you can find me</b>:\r\n                {\r\n                    contactsEntries.map(m => (\r\n                        <div key={m[0] + m[1]}>\r\n                            <div>{m[0]}:</div>\r\n                            <div>\r\n                                <Field name={`contacts.${m[0]}}`} component={Input}\r\n                                       validate={[]}/>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileDataFormPropsType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)","import {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {AppThunk} from '../../../../../redux/redux-store';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n}\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = ({\r\n                                                                       status,\r\n                                                                       updateStatus\r\n                                                                   }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n\r\n    const deactivateEditMode = () => {\r\n        updateStatus(profileStatus)\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <div>\r\n            <input onChange={onStatusChange} value={profileStatus} autoFocus\r\n                   onBlur={deactivateEditMode}/>\r\n        </div>\r\n        : <div><span onDoubleClick={activateEditMode}>{status || 'no status'}</span></div>\r\n}","import {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.scss';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {AppThunk} from '../../../redux/redux-store';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {ProfileDataFormPropsType, ProfileDataReduxForm} from './ProfileDataForm/ProfileDataForm';\r\nimport {ProfileStatusWithHooks} from './ProfileData/ProfileStatus/ProfileStatusWithHooks';\r\nimport {ProfileType} from '../../../api/profile-api';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n    isOwner: boolean\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    isEditMode: boolean\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, savePhoto, saveProfile,\r\n                                isOwner, isEditMode, setEditMode,\r\n                            }: ProfileInfoPropsType) => {\r\n    if (!profile) return <Preloader/>\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormPropsType) => {\r\n        saveProfile(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img src={profile.photos.large || userPhoto} alt={'user avatar'}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            {\r\n                isEditMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} setEditMode={setEditMode}/>\r\n            }\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__A8-bX\",\"posts\":\"MyPosts_posts__D4CF1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__pT53g\"};","import s from './Post.module.scss';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post = ({message, likeCount}: PostPropsType) => (\r\n    <div className={s.item}>\r\n        <img src=\"https://99px.ru/sstorage/1/2012/06/image_10406120020582211120.gif\"\r\n             alt={'avatar image'}/>\r\n        {message}\r\n        <div><span>like</span> {likeCount}</div>\r\n    </div>\r\n)","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {FC} from 'react';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst addPostForm: FC<InjectedFormProps<AddPostFormDataType>> = ({handleSubmit}) => (\r\n    <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Enter your post'} name={'newPostBody'}\r\n                   component={Textarea} validate={[required, maxLength10]}/>\r\n        </div>\r\n        <div><button>Add post</button></div>\r\n    </form>\r\n)\r\n\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({\r\n    form: 'profileAddPostForm'\r\n})(addPostForm)","import s from './MyPosts.module.scss';\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {AddPostFormDataType, AddPostFormRedux} from './AddPostForm/AddPostForm';\r\nimport {memo} from 'react';\r\n\r\nexport const MyPosts = memo(({posts, addPost}: MyPostsPropsType) => {\r\n    const postsElements = [...posts].reverse().map(({id, message, likesCount}) => (\r\n        <Post key={id} message={message} likeCount={likesCount}/>\r\n    ))\r\n\r\n    const addNewPost = (formData: AddPostFormDataType) => addPost(formData.newPostBody)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n})","import {MyPosts} from './MyPosts';\r\nimport {profileActions, PostType} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>,\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    posts: state.profilePage.posts,\r\n})\r\n\r\nexport const MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps, {addPost: profileActions.addPost})(MyPosts)","import {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {AppThunk} from '../../redux/redux-store';\r\nimport {ProfileDataFormPropsType} from './ProfileInfo/ProfileDataForm/ProfileDataForm';\r\nimport {ProfileType} from '../../api/profile-api';\r\n\r\ntype ProfilePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => AppThunk\r\n    isOwner: boolean\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    isEditMode: boolean\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile,\r\n                            isEditMode, setEditMode}: ProfilePropsType) => (\r\n    <div>\r\n        <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}\r\n                     isOwner={isOwner} savePhoto={savePhoto} saveProfile={saveProfile}\r\n                     isEditMode={isEditMode} setEditMode={setEditMode}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n)","import {Profile} from './Profile';\r\nimport {AppStateType, AppThunk} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus, getUserProfile, profileActions, savePhoto, saveProfile, updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {ProfileDataFormPropsType} from './ProfileInfo/ProfileDataForm/ProfileDataForm';\r\nimport {Component, ComponentType} from 'react';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {ProfileType} from '../../api/profile-api';\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends Component<CommonPropsType> {\r\n    refreshProfile() {\r\n        const {match, authorizedUserId, history, getUserProfile, getStatus} = this.props\r\n        let userId = +match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile} status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        isOwner={+this.props.match.params.userId === this.props.authorizedUserId\r\n                        || !this.props.match.params.userId}\r\n                        savePhoto={this.props.savePhoto}\r\n                        saveProfile={this.props.saveProfile}\r\n                        isEditMode={this.props.isEditMode}\r\n                        setEditMode={this.props.setEditMode}/>\r\n    }\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    isEditMode: boolean\r\n}\r\nexport type MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => AppThunk\r\n    getStatus: (userId: number) => AppThunk\r\n    updateStatus: (status: string) => AppThunk\r\n    savePhoto: (file: string | Blob) => AppThunk\r\n    saveProfile: (profile: ProfileDataFormPropsType) => AppThunk\r\n    setEditMode: (isEditMode: boolean) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isEditMode: state.profilePage.isEditMode,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus, savePhoto, saveProfile,\r\n        setEditMode: profileActions.setEditMode\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import {Redirect} from 'react-router-dom';\r\nimport {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {PATH} from '../enums/paths';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}"],"names":["ProfileData","profile","setEditMode","contacts","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactsValues","Object","values","className","s","onClick","map","m","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","initialValues","contactsEntries","entries","onSubmit","Field","placeholder","name","component","Input","validate","Textarea","type","ProfileStatusWithHooks","status","updateStatus","useState","editMode","profileStatus","setProfileStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","savePhoto","saveProfile","isOwner","isEditMode","Preloader","src","photos","large","userPhoto","alt","target","files","length","formData","Post","message","likeCount","maxLength10","maxLengthCreator","AddPostFormRedux","required","MyPosts","memo","posts","addPost","postsElements","reverse","id","likesCount","newPostBody","MyPostsContainer","connect","state","profilePage","profileActions","Profile","ProfileContainer","this","props","match","authorizedUserId","history","getUserProfile","getStatus","userId","params","push","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","restProps","to","PATH"],"sourceRoot":""}